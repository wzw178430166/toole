1. 你有写过自定义指令吗？ 自定义指令的应用场景有哪些？

 当需要对普通DOM 元素进行底层操作的时候就会用到自定义指令。自定义指令又分为全局和局部注册。全局注册可以在实例外使用vue.directives注册全局。局部注册是在实例内使用directives定义。这样指令只能在这个实例中使用。用法：3个钩子函数。bind绑定元素时马上执行。/inserted插入DOM元素会执行钩子函数 /update更新的时候会触发。但是，对于大幅度的DOM变动，还是应该使用组件。使用自定义指令场景有 输入框自动聚焦可以自定义比如v-focus指令。  还有 使用相对时间转换。 类似 微博/朋友圈发布动态后的相对时间，比如刚刚/两分钟前等等。 可以自定义指令转换 时间戳为自定数据格式。

2.什么是虚拟DOM？如何实现一个虚拟DOM?说说你的思路。

以前大量通过js操作DOM的代价很高，因为会引起页面的重排重绘，增加浏览器的性能开销，降低页面渲染速度。然后vue就通过创建虚拟DOM来减少对真实DOM树的操作。

首先说一下模板转换成视图的过程：
Vue将模板编译成虚拟DOM渲染函数。执行渲染函数就可以得到一个虚拟节点树，通过 createElement 方法能将 VNode 渲染成 dom 节点。结合Vue自带的响应系统，在状态改变时，Vue能够智能地计算出重新渲染组件的最小代价，也叫做patching算法，并应用到DOM操作上。这一过程就是实现虚拟DOM的过程。从而减少浏览器的开销，提高渲染速度。

模板-渲染函数-vnode虚拟节点-patch

3.vue项目中有封装过axios吗？主要是封装哪方面？
日常业务中通常会对axios进行封装来使用，这么做的好处是：我们可以在每次请求前对请求做处理还可以对错误进行统一处理，从而避免每次发请求都要做重复的工作。同时有利于减少代码的冗余，看起来清晰，明了。比如：我们每次发送请求前都需要对请求的url做处理，就可以用到axios请求拦截；对后端返回的错误或网络错误通过响应拦截进行统一处理 等等。

主要的是封装  请求方式：get和post   ，还有：请求超时： 当断网时，通过更新vuex中network的状态来控制断网提示组件的显示隐藏。断网提示一般会有重新加载数据的操作   ，还有post请求头的设置，请求拦截。考虑到接口会有多个不同域名的情况 ，可以增加模块化的api管理  。 大概就是封装这些方面的。

4. 你了解axios的原理吗？有看过它的源码吗？
axios是一个基于Promise的http请求库,可用于浏览器端和 Node 服务端
底层根据默认设置 新建一个Axios对象， axios中所有的请求[axios, axios.get, axios.post等...]内部调用的都是Axios.prototype.request,新建一个Axios对象时，会有两个拦截器，request(we k 史特）请求拦截器，response（readys 棒史）响应拦截器。
新建的Axios对象主要是用来挂载axios实例的一些设置(如defaults会挂载axios实例的通用设置，interceptors（int sex 特史）用于存放拦截器)
根据源码可知，axios实例是对Axios.prototype.request方法包裹了一层函数，主要是为将Axios.prototype.request内部的this绑定到新建的Axios对象上。然后通过 utils（u 跳 ）.extend （e send 的）将内部context（call ten）和Axios.prototyp的属性添加到这个Axios.prototype.request方法上，添加上去的函数也会绑定this到新建的Axios对象上。最终的axios实例上面的方法内部的this指向的都是新建的Axios对象，从而使得不同axios实例之间隔离了作用域，可以对每个axios实例设置不同的config(come fit 特)。大致讲了一下axios的执行原理,其实还有很多细节就不一一列出了。

5. 说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？

说明文档
 mock  mo 渴
package.json   趴 get g
main.js  猛ing
component  come put 们
assets   啊瑟史
store   史多
views   well 史
static   史哒忑
static  思哒忑
dist   this  使用生产环境配置构建项目，构建好的文件会输出到 "dist" 目录
node_modules   node_modules是 node依赖,通过npm这个工具可以下载项目所需的工具依赖

https://www.cnblogs.com/renyi-fan/p/12484173.html

6.vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做
 （网上找个vue后台管理模板）

在一个项目中，一些功能会涉及到重要的数据管理，为了确保数据的安全，我们会在项目中加入权限来限制每个用户的操作。作为前端，我们要做的是配合后端给到的权限数据，做页面上的各种各样的限制。

如果是按钮权限设置：可以配合v-if   在main.js全局定义一个方法， 在用户登录成功后，获取用户的按钮权限，这个数组格式数据存储到store数据仓库中。 在需要的按钮上使用即可。

7.HTML5 history 模式还是 hash 模式
 /table/:id  在路由跳转的时候 带这个id 是动态的过去

8.  axios  post 传参用data  get  用 params

9.  子组价    pageChange: {
            type: Function,
            default: function(val){
                return null
            }
   要 传 val  这样 父组件才能接收到 当前页码

10. vue项目中你是如何解决跨越的呢？
 第一个方案是： cors解决跨域，服务端可以安装cors 然后引入工具，配置需要跨域的域名，一般在origin（哦俊）里面添加，然后可以设置credentials（kre等九屎） 是否验证。
第二个方案是：jsonp解决跨域。  原理是：
jsonp主要是通过script可以链接远程url来实现跨域请求，创建一个回调函数，然后在远程服务上调用这个函数并且将JSON 数据形式作为参数传递，完成回调。JSONP只支持GET请求而不支持POST等其它类型的HTTP请求。需要注意的是在使用JSONP的时候要保证使用的JSONP服务是安全的。如果提供JSONP的服务存在页面注入漏洞，它返回的javascript语句都将被执行。
第三个方案是：代理跨域
vue脚手架提供了配置反向代理的接口，即设置config/index.js中的proxyTable（po fit table），需要注意的是在开发环境跟生产环境的配置不同，开发环境API_HOST可以使用 api 为开头，
通过伪造请求使得http请求为同源的，然后将同源的请求发送到反向代理服务器上，由反向代理服务器去请求真正的url，这样就绕过直接请求真正的url导致跨域的问题。那么生产环境下就要配置完整的域名了。

11. vue项目本地开发完成部署到服务器，刷新后报404是什么原因？
  主要问题是因为Nginx配置有缺失。进入到nginx.conf文件里面,如果URL匹配不到任何静态资源，就跳转到默认的index.html，配置location 添加 try_files $uri $uri / index.html   

第二个方法是在 sever里同样在location 中   配置  需要指向下面的@router 否则会出现vue的路由在nginx 中刷新出现404

 对应上面的 @router，主要原因是路由的路径资源并不是一个真实的路径，所以无法找到具体的文件。因此需要rewrite（well why） 到 index.html 中，然后交给路由在处理请求资源。

12.你是怎么处理vue项目中的错误的？
 常见的错误会有 引用一个不能存在的变量，报xx变量is not defined，还有vue代码中本身逻辑错误，还有错误来源包括：后端接口错误, 400, 404, 500这些常见错误。这个时候我们需要在axio中做统一处理。还有html js 语句语法等等错误。处理方法首先还是打开控制台查看错误信息。vue官方文档中是有一个介绍异常处理的章节的，
如果在组件渲染时出现运行错误，错误将会被传递至全局 Vue.config.errorHandler 配置函数 (前提需要另外配置)。利用这个钩子函数来配合错误跟踪，省去在代码中到处写catch语句块。还可以：绑定点击事件定义一个会抛出异常的方法，然后一步步进行排查。

13.keep-alive的理解？
有时候我们不希望组件被重新渲染影响使用体验；或者处于性能考虑，避免多次重复渲染降低性能。而是希望 组件可以缓存下来,维持当前的状态。这时候就可以用到keep-alive组件。

keep-alive是一个抽象组件：它自身不会渲染一个DOM元素，也不会出现在父组件链中；使用keep-alive包裹动 态组件时，会缓存不活动的组件实例，而不是销毁它们。


应用场景
如果未使用keep-alive组件，则在页面回退时仍然会重新渲染页面，触发created钩子，使用体验不好。 在以 下场景中使用keep-alive组件会显著提高用户体验，菜单存在多级关系，多见于列表页+详情页的场景如：

商品列表页点击商品跳转到商品详情，返回后仍显示原有信息
订单列表跳转到订单详情，返回，等等场景。

用户在某个列表页面选择筛选条件过滤出一份数据列表，由列表页面进入数据详情页面，再返回该列表页面， 我们希望：列表页面可以保留用户的筛选（或选中）状态。
keep-alive就是用来解决这种场景。当然keep- alive不仅仅是能够保存页面/组件的状态这么简单，它还可以避免组件反复创建和渲染，有效提升系统性能。 总的来说，keep-alive用于保存组件的渲染状态。



keep-alive的生命周期
初次进入时：created > mounted > activated；退出后触发 deactivated
再次进入：会触发 activated；事件挂载的方法等，只执行一次的放在 mounted 中；组件每次进去执行的方法 放在 activated 中

https://blog.csdn.net/fu983531588/article/details/90321827   #1296db

 