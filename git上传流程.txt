1.验证是否安装 cmd > git

 1.git  clone  代码库地址    （先github创建库）  本地目录会有一个新目录，     里面有 .git文件    

 2.git init  进入新目录设置该目录路径

 3 git status   拉自己项目到新目录里，查看目录有没有自己项目是红色字的

 4. git add .   将工作区代码添加到暂存区

 5.$ git commit -m "ddd"

 6.$ git push  ......github代码库地址/origin   git push origin

     node_modules   禁止上传******
 7. 进入目录 git bash here  设置  vim .gitignore  
   按
      i

      键切换到编辑状态，输入规则，例如
       node_modules/  这里要改为node_modules   
         ，然后按
        Esc
        键退出编辑，输入
       :wq
         保存退出。
    
   
  接口  VS  路由

  Ajax请求 对应  接口


     如果第一次上传就输出：
   
	git  config  --global   user.email   "用户邮箱"
        git  config  --global   user.name   "用户名"

 7.每天早上 git pull 地址 最新的完整文件

  package.json 文件是要和node-model同一个跟目录下的 才能用npm init 生成package.json文件。 这样也会自动更新到package.json文件下
   一句话：就是有node-modules的文件目录下才能用npm init生成package.json文件。

  然后通过npm i 下载项目中所有需要使用的npn包。   在项目中有package.json然后通过npm i 自动下载生成项目中需要使用的node-modules包 

    新浪云 部署上线
  1. git clone https://git.sinacloud.com/wwwhui
  2. git remote add sae https://git.sinacloud.com/wwwhui
  3. git remote
  4. git add .
  5.git commit -m "ddd"
  6.git push sae master
#将改动推送到远程仓库
git push origin master

 7.请确保此时你能够正确运行 npm install命令 和npm start命令，如果是cmd命令行工具应该可以两条命令一起执行：
npm install && npm start





{
  "name": "haolemaifuwuduan",
  "version": "1.0.0",
  "engines": {
    "node": "8.11.1"
  },
  "description": "好乐买app服务端",
  "main": "app.js",
  "dependencies": {
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "express-session": "^1.16.2",
    "multer": "^1.4.2",
    "mysql": "^2.17.1",
    "request": "^2.88.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server/app.js"
  },
  "author": "",
  "license": "ISC"
}

   			SVN代码管理
   1.服务端     svnadmin create 仓库地址  端口号：3690
   2.客户端

   2.1  客户端检出 ： checkout       服务端地址  账号  密码
   2.2 提交  svn add .  / index.html
   2.3          svn commit -m '完成一个功能' 
   2.4   
             trunk: 主干 ： 日常开发不稳定的代码的地方
             branches: 分支    一些阶段性，子项目。 从主干分出来的分支，最后可以合并到主干
             tags: 项目历史版本。只读，  一期项目，二期项目的最终版本

     首先： 从服务器把最新的代码更新 update 到自己本地。
               做完一个功能提交一次。备注。
	提前 解决 commit到svn服务器，解决文件冲突

  	svn update  更新
  	svn commit 提交  
     冲突：
    (1)强制替换成自己的！！ resolve conflict using 'mine'
    (2)别人的把自己的替换！！ resolove conflict using 'theirs' 
  建议：（3）自己编辑冲突：两个都要保留，必须自己选择合并！！
        	Edit conflict    更改后需要 mark as resolved 标记为已解决

    忽略：
    添加到忽略列表：
    右键- tortoisesvn- 添加到忽略列表 -- node-moduls--

    最近信息--自己做过的工作

  锁定： 右键

   切换版本：  把最新代码提交到服务器，然后选择 trostnSVN--切换--选择第几个                     版本
       恢复：回到原来的版本----切换到最新版本--svn update更新----回到本来的版本  
   
   脚手架创建：
     脚手架3.0   vue create myapp
    脚手架2.0    vue init webpack my-project



